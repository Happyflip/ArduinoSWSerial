Available functions for Arduino Nano Matter:
	getSilabsPortFromArduinoPin
	getSilabsPinFromArduinoPin
	GPIOINT_CallbackRegisterExt
	GPIOINT_CallbackUnRegister
	digitalPinToInterrupt
	GPIO_PinModeSet
	pinToPinName
	analogRead
	analogWrite
	digitalRead
	digitalWrite
	pinMode
	millis
	micros
	delay

Missing functions for Arduino Nano Matter:
Added: digitalPinToBitMask // returns the bitmask of a specified pin (A0, D5..)
Added: digitalPinToPort // returns the port (PB, PD...) of a specified pin (A0, D5..) 
Added: portInputRegister // returns an input port register of the specified port => PD, PB, PC..., this register contains input values
Added: portOutputRegister // returns an output port register of the specified port.
digitalPinToPCMSK // quickly get the proper register (PCMSK0, PCMSK1, or PCMSK2) given the number of the Arduino pin. PCMSKx -> controls which pin from specific port can produce interrupt
				  // ATMEL:  PCMSKx -> controls which pin from specific port can produce interrupt
				  // ARM(SiliconLabs): GPIO_IEN -> enable specific interrupt
digitalPinToPCICR // quickly get the proper register PCICR -> Possible to enable interrupts for bunch of pins (port) containing my rxPin
				  // ATMEL: Enable interrupts for bunch of pins (port)
				  // ARM(SiliconLabs): GPIO_EXTIPSELL -> Enables interrupts for bunch of pins (port)
cli() // Clear interrupt global enable flag bit (disable all interrupts).
 -> possible to use use __disable_irq like:
	void ImportantFunction1(void) {
    /* Important function 1 */
    uint32_t prim;
    
    /* Do some stuff here which can be interrupted */
    
    /* Read PRIMASK register, check interrupt status before you disable them */
    /* Returns 0 if they are enabled, or non-zero if disabled */
    prim = __get_PRIMASK();
    
    /* Disable interrupts */
    __disable_irq();
    
    /* Do some stuff here which can not be interrupted */
    
    /* Call subfunction */
    ImportantFunction2();
    
    /* Do some stuff here which can not be interrupted */
    /* This part is still interrupt safe because ImportantFunction2 will not enable interrupts */
    
    /* Enable interrupts back */
    if (!prim) {
        __enable_irq();
    }
    
    /* Do some stuff here which can be interrupted */
	}
	-> Why so is so complicated to disable interrupts:
	If interrupts were enabled and something interrupts you between the __get_PRIMASK() and the __disable_irq()
	and disables IRQs itself, it will restore conditions before it finishes so my 'old_primask' variable will still be valid."

sei() // Set interrupt global enable flag bit (re-enable interrupts after being disabled).

Missing registers for Arduino Nano Matter:
SREG // SREG is the processor Status REGister. Global Interrupt Enable bit, carry and zero bit and so on... 
TCNT0
PCI_FLAG_REGISTER // Pin Change interrupt flag register

Files where to inspire about:
 - AppData\Local\Arduino15\packages\SiliconLabs\hardware\silabs\2.2.0
Interrupts -> 	Kody\NeoSWSerial\SiliconLabsSrc\cores\silabs\Interrupt.cpp
Pin to... -> 	Kody\NeoSWSerial\SiliconLabsSrc\cores\silabs\pinToIndex.cpp
Pin mapping -> 	Kody\NeoSWSerial\SiliconLabsSrc\cores\silabs\pinDefinitions.h